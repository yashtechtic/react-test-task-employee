import { createAsyncThunk, createSlice, current } from "@reduxjs/toolkit";
import { data } from "./fakedb";
import { Base, FieldSet, Record, Records, Table } from "airtable";

const initialState = {
  user: data,
  getStudentDatas: [],
};
export const userSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    deleteUser: (state, action) => {
      console.log("action :>> ", action, state);
      //   let removeFromArr= state.user
      let arr = current(state.user).filter(
        (items) => items.id !== action.payload.id
      );
      console.log("arr :>> ", arr);
      state.user = arr;
    },
    getUser: (state) => {
      state.value = data;
    },
    addUser: (state, action) => {
      console.log("object :>> ", state, action.payload.Name);
      let json = {
        id: state.user.length + 1,
        full_name: action.payload.Name,
        email: action.payload.Email,
        post: action.payload.Position,
        DOB: action.payload.DOB,
        Salary: action.payload.Salary,
        JoiningDate: action.payload.JoiningDate,
        mobile: action.payload.mobile,
        Department: action.payload.Department,
        age: "45",
      };
      console.log("json :>> ", json);
      state.value = state.user.push(json);
    },
    getStudentData: (state, action) => {
      console.log("object :>> ");
      LoadDataUsingAPI("Joe").then((data) => {
        console.log("data :>> ", data);
        state.getStudentDatas = data;
      });
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});
export const { deleteUser, getUser, addUser, getStudentData } =
  userSlice.actions;

export default userSlice.reducer;
const LoadDataUsingAPI = async (studentName) => {
  const API_KEY = "keyz6halTok0ph1mN";
  const BASE_ID = "app8ZbcPx7dkpOnP0";

  const result = [];
  const Airtable = require("airtable");
  const base = new Airtable({ apiKey: API_KEY }).base(BASE_ID);
  const tableStudents = base("Students");
  const tableClasses = base("Classes");
  const studentData = (
    await tableStudents
      .select({
        filterByFormula: `({Name}='${studentName}')`,
      })
      .firstPage()
  )[0];
  let finalclasses = [];
  let classesList = studentData.fields.Classes;
  for (let i = 0; i < classesList.length; i++) {
    finalclasses.push(await getNameFromId(tableClasses, classesList[i]));
  }
  const classData = await tableClasses
    .select({
      filterByFormula: `OR(
                    {Name} = 'CS 101',
                    {Name} = 'CS 103'
                )`,
    })
    .all();
  let finalData = JSON.parse(JSON.stringify(classData));

  finalData.forEach((element) => {
    let finalObject = {
      className: "",
      studentNames: [],
    };
    finalObject.className = element.fields.Name;
    element.fields.Students.forEach(async (studeentElement) => {
      await getNameFromId(tableStudents, studeentElement).then((res) => {
        finalObject.studentNames.push(res);
      });
    });
    result.push(finalObject);
  });
  console.log("object :>> ", result);
  return result;
};
const getNameFromId = async (tableName, id) => {
  return (await tableName.find(id)).fields.Name;
};
